# -*- coding: utf-8 -*-
"""Olympic Data Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kLHH-AtkO68aB68Mc9N4KGtQSJpHaT_b
"""

# Commented out IPython magic to ensure Python compatibility.
#Importing essential libraries for data analysis and visualization
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# %matplotlib inline

#Reduce the number of rows displayed for data frames
pd.set_option('display.max_rows', 10)

"""##Load the 2 datasets"""

regions = pd.read_csv('/content/noc_regions.csv')
regions

len(regions)

regions[pd.notna(regions['notes'])]

athletes = pd.read_csv('/content/athlete_events.csv')
athletes

len(athletes)

athletes.set_index('ID', inplace=True)

athletes.head()

# Check if the DataFrame index is unique
athletes.index.is_unique

athletes.index.value_counts()

# Reset the index of the DataFrame 'athletes'
athletes.reset_index(inplace=True)
athletes

"""##How many years does this cover?"""

print("Min year: ", athletes.Year.min(), ". Max year: ", athletes.Year.max())

athletes.Year.hist(figsize=[16,6])

year_groups = athletes.groupby('Year')
year_counts = year_groups['ID'].nunique().sort_index()

year_counts.plot(figsize=[16,6], title='Unique athlete counts')

athletes.groupby(['Year', 'Season'])['ID'].nunique().sort_index().plot(figsize=[16,6], stacked=True, kind='bar')

year_season_groups = athletes.groupby(['Year', 'Season'])['ID'].nunique().sort_index()

year_season_groups.unstack().plot(figsize=[16,6], stacked=True, kind='bar', title='Summer and Winder Olympics athlete counts')

"""##How many distinct athletes do we have in total?"""

len(athletes.ID.value_counts())

year_gender_groups = athletes.groupby(['Year', 'Sex'])

year_gender_groups['ID'].count().unstack().plot(kind='bar', title='Athletes gender over competitions', figsize=[24, 6])

genders = athletes.groupby(['Year', 'Sex'])['Sex'].count().unstack().fillna(0).apply(lambda l: l/l.sum(), axis=1) * 100
genders['Delta'] = genders['M'] - genders['F']

pl = genders.plot(figsize=[24, 6])
pl.set_yticklabels(['{tick}%'.format(tick=t) for t in pl.get_yticks()])
pl.set_ylabel('Participation Percentage')
pl.set_xlabel('Competition Year')
pl.set_title('Male/Femal Participation Percentage')
print('')

"""##Athletes' Age"""

athletes.Age.hist(figsize=[24, 6], bins=50)

age_bins = pd.cut(athletes.Age, bins=[0, 20, 25, 30, 40, 100], labels=['Under 20', '20-25', '25-30', '30-40', 'Uver 40'])

age_group_counts = athletes.Age.groupby(age_bins).count()

age_pie = age_group_counts.plot(kind='pie', figsize=[5,5], autopct="%.2f")
age_pie.set_title('Age group distribution')
age_pie.set_yticklabels(['{tick}%'.format(tick=t) for t in age_pie.get_yticks()])

print()

"""##Average athlete age over competitions"""

mean_age_plt = athletes.groupby('Year')['Age'].mean().plot(figsize=(24, 6), title='Average Athlete Age by Competition', grid=True)
mean_age_plt.set_yticklabels(['{tick} years'.format(tick=int(t)) for t in mean_age_plt.get_yticks()])

print()

year_groups = athletes.groupby('Year')['Age']

age_gaps = pd.DataFrame({'youngest': year_groups.min(), 'oldest': year_groups.max()})
age_gaps.plot(figsize=(24, 6), grid=True)
print()

"""##oldest and youngest athletes for each competition"""

max_age, min_age = year_groups.idxmax(), year_groups.idxmin()

max_age_athlete = athletes.loc[max_age, ['Year', 'Age', 'Name']]
min_age_athlete = athletes.loc[min_age, ['Year', 'Age', 'Name']]

min_max_age_result = pd.merge(min_age_athlete, max_age_athlete, on='Year')
min_max_age_result = min_max_age_result.assign(youngest_athlete=min_max_age_result['Name_x'], youngest_age=min_max_age_result['Age_x'],
                                              oldestest_athlete=min_max_age_result['Name_y'], oldest_age=min_max_age_result['Age_y'])

min_max_age_result = min_max_age_result.drop(['Age_x', 'Name_x', 'Age_y', 'Name_y'], axis=1)
min_max_age_result

"""##Countries/Teams"""

#How many countries have participated in Olympic games overall?
athletes['NOC'].nunique()

#What's the difference between "country" and "team"
athletes['Team'].nunique()

#What countries have the participated the most to Olympic games?
athletes_with_names = pd.merge(athletes, regions, left_on='NOC', right_on='NOC', how='left').drop('notes', axis=1)
athletes=athletes_with_names
athletes.head()

country_counts = athletes.groupby('region')['region'].count()
country_counts_plt = country_counts.nlargest(20).plot(kind='bar', figsize=(24, 6))

country_counts_plt.set_title('Participation by region')
country_counts_plt.set_ylabel('Number of participations')
country_counts_plt.set_xlabel('Region Names')

for p in country_counts_plt.patches:
    country_counts_plt.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))

print()

"""##Participation by Host city"""

country_counts = athletes.groupby(['City', 'Year'])['City'].count()
country_counts_plt = country_counts.nlargest(15).plot(kind='bar', figsize=(24, 6))

country_counts_plt.set_title('Participation by Host City - Top 15')
country_counts_plt.set_ylabel('Number of participations')
country_counts_plt.set_xlabel('Region Names')

for p in country_counts_plt.patches:
    country_counts_plt.annotate(str(p.get_height()), (p.get_x() * 1.005, p.get_height() * 1.005))

print()

region_sport = athletes[['region', 'Sport']].assign(val=1)

top_countries_per_sport = region_sport.pivot_table(index='region', columns='Sport', values='val', aggfunc=np.sum).fillna(0).apply(lambda l: l.idxmax()).reset_index()
top_countries_per_sport

"""##Sports"""

athletes.head()

#How many unique sports does this dataset account for?
athletes.Sport.nunique()

#How has the number of sports per competition evolved over time?
year_sports_groups = athletes.groupby('Year', as_index=True)['Sport']

ysgpl = year_sports_groups.agg(lambda l: l.nunique()).plot(figsize=(16, 6))
ysgpl.set_title('Number of Sports per competition')
ysgpl.set_xlabel('Competition Year')
ysgpl.set_ylabel('Total Number of Disciplines')
print()

#What are the most popular sports?
sportplt = athletes.groupby('Sport', as_index=True).count()['ID'].reset_index().assign(total=lambda l: l.ID).plot(kind='bar', figsize=(32, 6), x='Sport', y='total')
sportplt.set_xlabel('Sport/Discipline Name')
sportplt.set_ylabel('Total number of participations')
sportplt.set_title('Overall Participations per Sport')
print()

"""##Medals"""

#How many medals have been awarded by type overall?
medalsgp = athletes['Medal'].reset_index().groupby('Medal')
medalsgp.count().reset_index()

#How many medals have been awarded by sport?
athletes[['Sport', 'Medal']].reset_index().groupby(['Sport', 'Medal']).count().unstack().fillna(0).plot(kind='bar', stacked=True, figsize=(32, 6), title='Awarded Medals by Type per Sport')
print()

#Which Year has awarded the most medals?
athletes[['Year', 'Medal']].reset_index().groupby(['Year', 'Medal']).count().unstack().fillna(0).plot(kind='bar', stacked=True, figsize=(32, 6), title='Awarded Medals by Type per Year')
print()

athletes[['Year', 'Medal']].reset_index().groupby(['Year', 'Medal']).count()

#What countries have won the most medals?
athletes[['Medal', 'region']].reset_index().groupby(['Medal', 'region']).count().sort_values(by='index', ascending=False).head(30).unstack().fillna(0).plot(kind='bar', stacked=False, figsize=(32, 6), title='Awarded Medals by Type per Country')
print()

#Which athletes have won the most medals?
athletes[['Medal', 'ID', 'Name']].reset_index().groupby(['Medal', 'ID', 'Name']).count().sort_values(by='index', ascending=False).reset_index()

